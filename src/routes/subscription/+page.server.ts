import { redirect } from '@sveltejs/kit';
import type { PageServerLoad } from './$types';

// Fonction pour extraire l'email de base (sans plus addressing)
function getBaseEmail(email: string): string {
    const [localPart, domain] = email.split('@');
    const baseLocalPart = localPart.split('+')[0];
    return `${baseLocalPart}@${domain}`;
}

export const load: PageServerLoad = async ({ locals, request, setHeaders }) => {
    const { session } = await locals.safeGetSession();

    // Rediriger vers login si pas connect√©
    if (!session) {
        throw redirect(303, '/login');
    }

    const userId = session.user.id;
    const userEmail = session.user.email;

    // R√©cup√©rer TOUS les abonnements (actifs, inactifs, en essai)
    const { data: allSubscriptions } = await (locals.supabase as any)
        .from('user_products')
        .select('stripe_product_id, subscription_status')
        .eq('profile_id', userId);

    // V√©rifier l'anti-fraude : r√©cup√©rer l'IP et v√©rifier dans la table anti_fraud
    let isInAntiFraud = false;
    let cookieFingerprint = null;
    try {
        // R√©cup√©rer l'IP de l'utilisateur
        const forwardedFor = request.headers.get('x-forwarded-for');
        const realIp = request.headers.get('x-real-ip');
        const userIp = forwardedFor?.split(',')[0] || realIp || request.headers.get('cf-connecting-ip') || '127.0.0.1';

        // Extraire l'email de base pour √©viter le contournement par plus addressing
        const baseEmail = userEmail ? getBaseEmail(userEmail) : '';

        // R√©cup√©rer le fingerprint depuis les cookies (protection imm√©diate)
        const cookieHeader = request.headers.get('cookie') || '';
        const fingerprintMatch = cookieHeader.match(/deviceFingerprint=([^;]+)/);
        cookieFingerprint = fingerprintMatch ? fingerprintMatch[1] : null;

        console.log('üîç Anti-fraude: V√©rification pour:', {
            userId,
            userEmail,
            baseEmail, // ‚úÖ Email de base pour la v√©rification
            userIp,
            cookieFingerprint: cookieFingerprint ? cookieFingerprint.substring(0, 8) + '...' : 'non trouv√©'
        });

        // V√©rifier si l'utilisateur est dans la table anti_fraud
        // On v√©rifie l'email exact, l'email de base, l'IP ET le fingerprint pour √©viter le contournement
        let conditions = [`email.eq.${userEmail}`, `email.eq.${baseEmail}`, `ip_address.eq.${userIp}`];
        if (cookieFingerprint) {
            conditions.push(`fingerprint.eq.${cookieFingerprint}`);
        }

        const { data: antiFraudRecord } = await (locals.supabase as any)
            .from('anti_fraud')
            .select('id')
            .or(conditions.join(','))
            .maybeSingle();

        isInAntiFraud = !!antiFraudRecord;

        if (isInAntiFraud) {
            console.log(`üîç Anti-fraude: Utilisateur bloqu√© (email: ${userEmail}, base: ${baseEmail}, IP: ${userIp}, fingerprint: ${cookieFingerprint ? cookieFingerprint.substring(0, 8) + '...' : 'non trouv√©'})`);
        } else {
            console.log(`üîç Anti-fraude: Utilisateur autoris√© (email: ${userEmail}, base: ${baseEmail}, IP: ${userIp}, fingerprint: ${cookieFingerprint ? cookieFingerprint.substring(0, 8) + '...' : 'non trouv√©'})`);
        }

        // ‚úÖ SUPPRIMER LE COOKIE APR√àS V√âRIFICATION
        if (cookieFingerprint) {
            setHeaders({
                'Set-Cookie': 'deviceFingerprint=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Strict'
            });
            console.log('üóëÔ∏è Cookie deviceFingerprint supprim√© apr√®s v√©rification');
        }

    } catch (error) {
        console.error('‚ö†Ô∏è Erreur lors de la v√©rification anti-fraude:', error);
        // En cas d'erreur, on consid√®re que l'utilisateur n'est pas bloqu√©
        isInAntiFraud = false;
    }

    // D√©terminer le plan actuel ET l'historique
    let currentPlan = null;
    let hasHadSubscription = false;

    if (allSubscriptions && allSubscriptions.length > 0) {
        hasHadSubscription = true;

        // Chercher un abonnement actif ou en essai
        const activeSubscription = allSubscriptions.find((sub: any) =>
            sub.subscription_status === 'active' || sub.subscription_status === 'trialing'
        );

        if (activeSubscription) {
            if (activeSubscription.stripe_product_id === 'prod_Selbd3Ne2plHqG') {
                currentPlan = 'basic';
            } else if (activeSubscription.stripe_product_id === 'prod_Selcz36pAfV3vV') {
                currentPlan = 'premium';
            }
        }
    }

    // V√©rifier si l'utilisateur est exempt√©
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const { data: profile } = await (locals.supabase as any)
        .from('profiles')
        .select('is_stripe_free, role')
        .eq('id', userId)
        .single();

    // Si exempt√©, rediriger vers le dashboard
    if (profile?.is_stripe_free || profile?.role === 'admin') {
        throw redirect(303, '/dashboard');
    }

    // D√©terminer le type de boutons √† afficher
    let buttonType: 'current' | 'choose' | 'trial' = 'trial';

    if (currentPlan) {
        // Utilisateur a un plan actif
        buttonType = 'current';
    } else if (hasHadSubscription || isInAntiFraud) {
        // Utilisateur a d√©j√† eu un abonnement OU est dans anti_fraud
        buttonType = 'choose';
    } else {
        // Utilisateur peut essayer gratuitement
        buttonType = 'trial';
    }

    console.log('üéØ Type de boutons d√©termin√©:', {
        currentPlan,
        hasHadSubscription,
        isInAntiFraud,
        buttonType
    });

    // Donn√©es des plans (en production, r√©cup√©rer depuis Stripe)
    const plans = [
        {
            id: 'basic',
            name: 'Basic',
            price: 14.99,
            currency: 'EUR',
            stripePriceId: 'price_1Rre1ZPNddYt1P7Lea1N7Cbq',
            features: [
                'Jusqu\'√† 10 produits',
                'Boutique en ligne personnalis√©e',
                'Gestion des commandes',
                'Calendrier de disponibilit√©s',
                'Paiements s√©curis√©s',
                'Support email'
            ],
            limitations: [],
            popular: false
        },
        {
            id: 'premium',
            name: 'Premium',
            price: 19.99,
            currency: 'EUR',
            stripePriceId: 'price_1RrdwvPNddYt1P7LGICY3by5',
            features: [
                'Produits illimit√©s',
                'Boutique en ligne personnalis√©e',
                'Gestion des commandes',
                'Calendrier de disponibilit√©s',
                'Paiements s√©curis√©s',
                'Demandes personnalis√©es',
                'Support email'
            ],
            limitations: [],
            popular: true
        }
    ];

    return {
        plans,
        currentPlan,
        hasHadSubscription,
        isInAntiFraud,
        buttonType, // ‚úÖ Nouveau champ pour d√©terminer le type de boutons
        user: {
            id: userId,
            email: userEmail
        }
    };
}; 